{"version":3,"sources":["components/utils.js","components/Card.js","components/Countries.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["utils","calcTime","utcStr","hoursStr","substr","hoursOffset","parseInt","minutesStr","minutesOffset","minutesToHr","parseFloat","offset","d","Date","utc","getTime","getTimezoneOffset","toLocaleString","Card","country","this","props","currentTime","timezones","length","className","src","flag","alt","name","capital","currencies","React","Component","Countries","countriesData","sort","a","b","map","key","numericCode","Form","state","countryName","baseUrl","event","preventDefault","currentInputValue","target","value","setState","url","fetchCountries","fetch","then","res","json","data","updateCountries","catch","console","log","id","type","onChange","handleChange","bind","placeholder","required","App","title","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8NA6BeA,EA7BD,CAGbC,SAAU,SAACC,GACV,IAAMC,EAAWD,EAAOE,OAAO,EAAG,GAC5BC,EAAcC,SAASH,GAEvBI,EAAaL,EAAOE,OAAO,EAAG,GAC9BI,EAAgBF,SAASC,GACzBE,EAAcC,WAAWF,EAAgB,IAGzCG,EAASD,WADGL,EAAcI,GAG1BG,EAAI,IAAIC,KAGRC,EAAMF,EAAEG,UAAqC,IAAxBH,EAAEI,oBAQ7B,OAL0B,MAAdd,EAAO,GAChB,IAAIW,KAAKC,EAAO,KAAUH,GAC1B,IAAIE,KAAKC,EAAO,KAAUH,IAGnBM,mBCIGC,E,iLAxBb,IAAMC,EAAUC,KAAKC,MACfC,EAAeH,EAAQI,UAAU,GAAGC,OAAS,EAChDxB,EAAMC,SAASkB,EAAQI,UAAU,IAEjC,mBAEH,OACC,oCACC,yBAAKE,UAAU,QACd,6BACC,yBAAKC,IAAKP,EAAQQ,KAAMC,IAAI,kBAE7B,yBAAKH,UAAU,QACd,wBAAIA,UAAU,cAAcN,EAAQU,MACpC,uBAAGJ,UAAU,cAAb,YAAoCN,EAAQW,QAAQ,6BAApD,aACYX,EAAQY,WAAW,GAAGF,KAAK,6BADvC,iBAEgBP,U,GAlBHU,IAAMC,WCaVC,EAbG,SAACb,GAIlB,OAFAA,EAAMc,cAAcC,KAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEd,UAAU,GAAKe,EAAEf,UAAU,GAAM,GAAK,IAG3E,yBAAKE,UAAU,SACbJ,EAAMc,cAAcI,IAAI,SAAApB,GAAO,OAC/B,kBAAC,EAAD,eAAMqB,IAAKrB,EAAQsB,aAAiBtB,QCiDzBuB,E,2MAvDdC,MAAQ,CACPC,YAAa,GACbC,QAAS,0C,4EAGGC,GACZA,EAAMC,iBAEN,IAAMC,EAAoBF,EAAMG,OAAOC,MAEvC9B,KAAK+B,SAAS,CACbP,YAAaI,IAGd,IAAII,EAAMhC,KAAKuB,MAAME,QAAUG,EAE3BA,EAAkBxB,OAAS,GAC9BJ,KAAKiC,eAAeD,K,qCAIPA,GAAM,IAAD,OAEnBE,MAAMF,GAEJG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAEhBF,KAAK,SAACG,GAEN,EAAKrC,MAAMsC,gBAAgBD,KAG3BE,MAAMC,QAAQC,O,+BAIhB,OACC,6BACC,wDACA,0BAAMrC,UAAU,oBACf,yBAAKA,UAAU,cACd,2BAAOsC,GAAG,eAAetC,UAAU,eAAeuC,KAAK,OAEnDC,SAAU7C,KAAK8C,aAAaC,KAAK/C,MACjC8B,MAAO9B,KAAKuB,MAAMC,YAElBwB,YAAY,aACZC,UAAQ,W,GAjDCrC,IAAMC,WC8BVqC,G,iNA1Bd3B,MAAQ,CACPR,cAAe,I,EAGhBwB,gBAAkB,SAACD,GAClB,EAAKP,SAAS,CACbhB,cAAeuB,K,wEAKhB,OACC,oCACC,yBAAKjC,UAAU,eACd,oCAAUL,KAAKC,MAAMkD,MAArB,OAA+B,uBAAGC,KAAK,8BAA8BvB,OAAO,SAASwB,IAAI,uBAA1D,oBACV,6BADrB,mEAEiE,6BAFjE,kDAIA,kBAAC,EAAD,CAAMd,gBAAiBvC,KAAKuC,mBAE7B,kBAAC,EAAD,CAAWxB,cAAef,KAAKuB,MAAMR,qB,GArBvBF,cCOEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,CAAKT,MAAM,mBAAqBU,SAASC,eAAe,SD4HlE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC,gB","file":"static/js/main.e8311feb.chunk.js","sourcesContent":["const utils = {\r\n\r\n\t//----- converting UTC timezone stamp to hours:minutes\r\n\tcalcTime: (utcStr) => {\r\n\t\tconst hoursStr = utcStr.substr(4, 2);\r\n\t\tconst hoursOffset = parseInt(hoursStr);\r\n\r\n\t\tconst minutesStr = utcStr.substr(7, 2);\r\n\t\tconst minutesOffset = parseInt(minutesStr);\r\n\t\tconst minutesToHr = parseFloat(minutesOffset / 60);\r\n\r\n\t\tconst offsetStr = hoursOffset + minutesToHr;\r\n\t\tconst offset = parseFloat(offsetStr);\r\n\r\n\t\tconst d = new Date(); // current local time\r\n\r\n\t\t// subtract local time zone offset, get UTC time in msec\r\n\t\tconst utc = d.getTime() + (d.getTimezoneOffset() * 60000);\r\n\r\n\t\t// create new Date object for different country\r\n\t\tconst nd = (utcStr[3] === \"+\")\r\n\t\t\t? new Date(utc + (3600000 * offset))\r\n\t\t\t: new Date(utc - (3600000 * offset));\r\n\r\n\t\t// return time as a string\r\n\t\treturn nd.toLocaleString();\r\n\t}\r\n};\r\n\r\nexport default utils;","import React from 'react';\r\nimport utils from './utils';\r\n\r\nclass Card extends React.Component {\r\n\trender() {\r\n\t\tconst country = this.props;\r\n\t\tconst currentTime = (country.timezones[0].length > 3)\r\n\t\t\t? utils.calcTime(country.timezones[0])\r\n\t\t\t// some minor error handling\r\n\t\t\t: \"no UTC zone data\";\r\n\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<img src={country.flag} alt=\"Country flag\"/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"info\">\r\n\t\t\t\t\t\t<h5 className=\"card-title\">{country.name}</h5>\r\n\t\t\t\t\t\t<p className=\"text-muted\">Capital: {country.capital}<br/>\r\n\t\t\t\t\t\t\tCurrency: {country.currencies[0].name}<br/>\r\n\t\t\t\t\t\t\tCurrent time: {currentTime}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst Countries = (props) => {\r\n\r\n\tprops.countriesData.sort((a, b) => (a.timezones[0] > b.timezones[0]) ? 1 : -1);\r\n\r\n\treturn (\r\n\t\t<div className=\"cards\">\r\n\t\t\t{props.countriesData.map(country =>\r\n\t\t\t\t<Card key={country.numericCode} {...country}/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Countries;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n\r\n\tstate = {\r\n\t\tcountryName: '',\r\n\t\tbaseUrl: 'https://restcountries.eu/rest/v2/name/'\r\n\t};\r\n\r\n\thandleChange(event) {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconst currentInputValue = event.target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountryName: currentInputValue,\r\n\t\t});\r\n\r\n\t\tlet url = this.state.baseUrl + currentInputValue;\r\n\r\n\t\tif (currentInputValue.length > 0) {\r\n\t\t\tthis.fetchCountries(url);\r\n\t\t}\r\n\t}\r\n\r\n\tfetchCountries(url) {\r\n\t\t// GET request to the endpoint\r\n\t\tfetch(url)\r\n\t\t// parse the output to JSON\r\n\t\t\t.then(res => res.json())\r\n\t\t\t// set the value of our state to the output from the API call\r\n\t\t\t.then((data) => {\r\n\t\t\t\t//this.setState({countries: data})\r\n\t\t\t\tthis.props.updateCountries(data);\r\n\t\t\t})\r\n\t\t\t// log any error we get to the console\r\n\t\t\t.catch(console.log)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Where do you want to go?</h3>\r\n\t\t\t\t<form className=\"search-countries\">\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<input id=\"countryInput\" className=\"form-control\" type=\"text\"\r\n\t\t\t\t\t\t\t// grab the input value when changed\r\n\t\t\t\t\t\t\t   onChange={this.handleChange.bind(this)}\r\n\t\t\t\t\t\t\t   value={this.state.countryName}\r\n\r\n\t\t\t\t\t\t\t   placeholder=\"Wonderland\"\r\n\t\t\t\t\t\t\t   required/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport Countries from './components/Countries';\r\nimport Form from './components/Form';\r\nimport './styles/styles.css';\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tcountriesData: []\r\n\t};\r\n\r\n\tupdateCountries = (data) => {\r\n\t\tthis.setState({\r\n\t\t\tcountriesData: data\r\n\t\t})\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t<p>Using {this.props.title} by <a href=\"https://github.com/KsaniyaN\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n\t\t\t\t\t\tXenia Novosilska</a><br/>\r\n\t\t\t\t\t\tTask: search countries using REST Countries API and show details<br/>\r\n\t\t\t\t\t\tTechnologies used: React, Bootstrap, Flex grid</p>\r\n\t\t\t\t\t<Form updateCountries={this.updateCountries}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Countries countriesData={this.state.countriesData}/>\r\n\t\t\t</>\r\n\t\t)\r\n\t};\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App title=\"REST Countries\" />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}